//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Boat"",
            ""id"": ""405e82b1-a040-4907-98d0-c51674f3c58e"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""bbd8d495-e372-4f00-87cc-d48fa451e7ee"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""c71ea77c-28d1-4d42-8f47-5407a539a981"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reel"",
                    ""type"": ""Value"",
                    ""id"": ""a15dc563-3eb5-4a9a-abb2-5628aaad3cb9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Value"",
                    ""id"": ""fdcdf5c3-31ee-43d4-bc17-9a913f1111c1"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right Harpoon"",
                    ""type"": ""Button"",
                    ""id"": ""568748a1-e071-4b0c-9260-705eb04ae81d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Harpoon"",
                    ""type"": ""Button"",
                    ""id"": ""2128c4cd-b47a-49ce-a6b3-1a7a7ebe3f59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot Harpoon"",
                    ""type"": ""Button"",
                    ""id"": ""afbe8449-f9ac-4369-8ff1-29749f74c58f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel Harpoon"",
                    ""type"": ""Button"",
                    ""id"": ""70acd95b-b063-4463-a004-a82d63caedc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""ae7cba2a-71e9-44ac-8ae7-adf31b7c196a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""4f58ea53-3407-4d59-b892-1b3e177c1d24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05b9ff0f-b4a6-4508-bfdd-de945a96afdb"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard A/D"",
                    ""id"": ""5c481df0-07a4-4bda-9d18-1ba83a6e7be2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""32b4f116-3ccc-41fd-a4a5-26ddb49cde42"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b18f5736-5270-4106-9c96-6280caa887ae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard Q/E"",
                    ""id"": ""6375cbe7-4228-4de8-aac4-5a703f7c0aba"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""10da43bd-4542-4a4e-8232-fa109d261e77"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8452a481-f351-4539-8bbe-0ab1969ea4f8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad Shoulder Buttons"",
                    ""id"": ""e5cc8a12-2ada-4197-89b2-a44ae9aeb050"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0d6b0a57-8d6a-4135-9f09-6a47daaefb12"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b39617bd-24aa-4ce8-aab1-8f0d3f3f45d8"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9718f8d0-99a6-4e31-836d-343480bbf076"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afb312bb-1acf-4e96-90a0-3bccaffbd07f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard S/W"",
                    ""id"": ""cd3089a4-0432-4bd3-87cb-bccf39f5342c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""135762f7-4fa8-41bf-b8db-42a50fb70c8c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fb2fe90d-d786-46a9-9413-ff02840a9b9f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""db6b68b3-b526-4cfe-86f1-08c6882b3592"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Harpoon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59e281e-b6c3-44a1-835e-e0111ba59084"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Harpoon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea481850-dadf-40f2-af29-907ecb8eed6c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6862c30-5223-4e54-ba0e-8bb7d996963e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6ef5737-54ac-4cbe-877c-11fe13831836"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot Harpoon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69155ee9-4c2f-42f9-9133-fa0a11056e02"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Harpoon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Character"",
            ""id"": ""8eb16fcd-6782-443f-a128-32fca48eaa4d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f57e1df-5301-4eac-87c1-b3bbaa8f36f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""918ea663-054e-4297-a538-131ddeb2c564"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Glide"",
                    ""type"": ""PassThrough"",
                    ""id"": ""04c32b65-dfc5-4550-8789-8e74bf557716"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f3cf9c01-e022-408e-8e62-15b5a887417d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0157ab3a-8a46-4d4f-8bf8-a5e7ece3ebfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11afffa7-695b-407e-9af3-584e948e73ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aac0294c-8625-4f08-af83-f996c4bc575c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0f99cc6e-ebf6-411a-b8e0-4b20674206ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf4e92bc-442d-4a1a-ba1c-33ecb5bb7a74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4e35e6e3-1e27-4bdf-94ab-0e06e420ddbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""PassThrough"",
                    ""id"": ""99ca8904-ea80-465c-8a56-ca063d112b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Value"",
                    ""id"": ""50863995-03f7-472e-9a60-68fad26bd4bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vision"",
                    ""type"": ""Button"",
                    ""id"": ""1b102920-8075-49e1-a527-45fa544282cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""aefb51fa-6f79-4fa7-a93f-6fa5c04f734e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecd76d91-28c2-41a4-b8d1-0aa8c7f8fe28"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6dea8ebe-57b2-461c-bf29-5a812d4a851e"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1eb149b-09f7-4b13-bb50-a7d094f2c1e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cacac4bd-9fee-4931-8ac3-95089f0fd456"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2b6cdd7-c207-4eec-a37a-319b8e25897d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f6d9532d-b45a-48cf-973d-c1fc26ade278"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""fbabb462-6f45-4b42-966e-889961ce1f01"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2790f873-e6a3-4689-90f5-e2c242e7364f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2404cf3e-4eb9-44b2-896b-6269c58c3e7a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ee0fcbfc-a074-42f3-af5a-64fdb1eca7cb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e28fb18-d4f2-4e69-ae15-b24d940540cf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4cc6d9e9-685f-4ff9-901e-1ccba91cc361"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a596803-7d5d-434b-9981-0bfcb25e668b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0e580b7-862d-48e6-b196-79f9acd7e676"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=30,y=20)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51d68927-386f-4c09-bbdb-4c784fb5c374"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a38ad9b-71e0-48f3-a862-5c9ec93c944b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc1f230f-aa1d-44d5-8fd3-a8f8b00e409a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1beb76bd-fbdc-4732-a799-383207f20140"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84a5608f-6631-42f3-9e73-a6163a30d5ec"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0e9effd-e2d6-4217-ae80-1ea982acc5ce"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58623265-79f8-4053-b997-9e709ec3a408"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27fae711-845e-4f41-92ba-50c906392039"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0fea58c-b1b4-43f1-b638-f29260833c9b"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfe7e659-b631-44fa-a14d-a16efb3c73d0"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6aa817a-bae8-4de1-b1c6-03a46f69b48b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9cd36aa-0482-4636-97b9-3f2f01c75d5d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f715877-7d76-4a03-9f4b-2648c66a6b69"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2618f46f-a385-4ee8-b599-4aee6d752498"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""552757e9-44d2-424a-a0d6-391c3edb3872"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""468494e7-6b9b-4935-b2e8-f11f84f6f013"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""147d40f6-334e-4daa-b14b-0382fd591aa8"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cd2266c-eb69-4194-8b5e-24ebab4904d5"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vision"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed739e7-6ad0-40c2-b07a-239bcd685c06"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd21bcaf-0618-4b2d-b93c-16e4f4a9e8c7"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68d9cd34-3d8f-412a-bc55-def229bb11fd"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d71fb2ad-e474-4bd6-b92d-478c8572b2e8"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Boat
        m_Boat = asset.FindActionMap("Boat", throwIfNotFound: true);
        m_Boat_Turn = m_Boat.FindAction("Turn", throwIfNotFound: true);
        m_Boat_Pitch = m_Boat.FindAction("Pitch", throwIfNotFound: true);
        m_Boat_Reel = m_Boat.FindAction("Reel", throwIfNotFound: true);
        m_Boat_Boost = m_Boat.FindAction("Boost", throwIfNotFound: true);
        m_Boat_RightHarpoon = m_Boat.FindAction("Right Harpoon", throwIfNotFound: true);
        m_Boat_LeftHarpoon = m_Boat.FindAction("Left Harpoon", throwIfNotFound: true);
        m_Boat_ShootHarpoon = m_Boat.FindAction("Shoot Harpoon", throwIfNotFound: true);
        m_Boat_CancelHarpoon = m_Boat.FindAction("Cancel Harpoon", throwIfNotFound: true);
        m_Boat_Aim = m_Boat.FindAction("Aim", throwIfNotFound: true);
        m_Boat_Release = m_Boat.FindAction("Release", throwIfNotFound: true);
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        m_Character_Glide = m_Character.FindAction("Glide", throwIfNotFound: true);
        m_Character_Look = m_Character.FindAction("Look", throwIfNotFound: true);
        m_Character_Fire = m_Character.FindAction("Fire", throwIfNotFound: true);
        m_Character_Aim = m_Character.FindAction("Aim", throwIfNotFound: true);
        m_Character_Run = m_Character.FindAction("Run", throwIfNotFound: true);
        m_Character_Flashlight = m_Character.FindAction("Flashlight", throwIfNotFound: true);
        m_Character_Reset = m_Character.FindAction("Reset", throwIfNotFound: true);
        m_Character_Pickup = m_Character.FindAction("Pickup", throwIfNotFound: true);
        m_Character_Pause = m_Character.FindAction("Pause", throwIfNotFound: true);
        m_Character_Dodge = m_Character.FindAction("Dodge", throwIfNotFound: true);
        m_Character_Vision = m_Character.FindAction("Vision", throwIfNotFound: true);
        m_Character_Interact = m_Character.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Boat
    private readonly InputActionMap m_Boat;
    private IBoatActions m_BoatActionsCallbackInterface;
    private readonly InputAction m_Boat_Turn;
    private readonly InputAction m_Boat_Pitch;
    private readonly InputAction m_Boat_Reel;
    private readonly InputAction m_Boat_Boost;
    private readonly InputAction m_Boat_RightHarpoon;
    private readonly InputAction m_Boat_LeftHarpoon;
    private readonly InputAction m_Boat_ShootHarpoon;
    private readonly InputAction m_Boat_CancelHarpoon;
    private readonly InputAction m_Boat_Aim;
    private readonly InputAction m_Boat_Release;
    public struct BoatActions
    {
        private @PlayerActions m_Wrapper;
        public BoatActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_Boat_Turn;
        public InputAction @Pitch => m_Wrapper.m_Boat_Pitch;
        public InputAction @Reel => m_Wrapper.m_Boat_Reel;
        public InputAction @Boost => m_Wrapper.m_Boat_Boost;
        public InputAction @RightHarpoon => m_Wrapper.m_Boat_RightHarpoon;
        public InputAction @LeftHarpoon => m_Wrapper.m_Boat_LeftHarpoon;
        public InputAction @ShootHarpoon => m_Wrapper.m_Boat_ShootHarpoon;
        public InputAction @CancelHarpoon => m_Wrapper.m_Boat_CancelHarpoon;
        public InputAction @Aim => m_Wrapper.m_Boat_Aim;
        public InputAction @Release => m_Wrapper.m_Boat_Release;
        public InputActionMap Get() { return m_Wrapper.m_Boat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatActions set) { return set.Get(); }
        public void SetCallbacks(IBoatActions instance)
        {
            if (m_Wrapper.m_BoatActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnTurn;
                @Pitch.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnPitch;
                @Reel.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnReel;
                @Reel.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnReel;
                @Reel.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnReel;
                @Boost.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnBoost;
                @RightHarpoon.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnRightHarpoon;
                @RightHarpoon.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnRightHarpoon;
                @RightHarpoon.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnRightHarpoon;
                @LeftHarpoon.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnLeftHarpoon;
                @LeftHarpoon.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnLeftHarpoon;
                @LeftHarpoon.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnLeftHarpoon;
                @ShootHarpoon.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnShootHarpoon;
                @ShootHarpoon.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnShootHarpoon;
                @ShootHarpoon.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnShootHarpoon;
                @CancelHarpoon.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnCancelHarpoon;
                @CancelHarpoon.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnCancelHarpoon;
                @CancelHarpoon.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnCancelHarpoon;
                @Aim.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnAim;
                @Release.started -= m_Wrapper.m_BoatActionsCallbackInterface.OnRelease;
                @Release.performed -= m_Wrapper.m_BoatActionsCallbackInterface.OnRelease;
                @Release.canceled -= m_Wrapper.m_BoatActionsCallbackInterface.OnRelease;
            }
            m_Wrapper.m_BoatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Reel.started += instance.OnReel;
                @Reel.performed += instance.OnReel;
                @Reel.canceled += instance.OnReel;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @RightHarpoon.started += instance.OnRightHarpoon;
                @RightHarpoon.performed += instance.OnRightHarpoon;
                @RightHarpoon.canceled += instance.OnRightHarpoon;
                @LeftHarpoon.started += instance.OnLeftHarpoon;
                @LeftHarpoon.performed += instance.OnLeftHarpoon;
                @LeftHarpoon.canceled += instance.OnLeftHarpoon;
                @ShootHarpoon.started += instance.OnShootHarpoon;
                @ShootHarpoon.performed += instance.OnShootHarpoon;
                @ShootHarpoon.canceled += instance.OnShootHarpoon;
                @CancelHarpoon.started += instance.OnCancelHarpoon;
                @CancelHarpoon.performed += instance.OnCancelHarpoon;
                @CancelHarpoon.canceled += instance.OnCancelHarpoon;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Release.started += instance.OnRelease;
                @Release.performed += instance.OnRelease;
                @Release.canceled += instance.OnRelease;
            }
        }
    }
    public BoatActions @Boat => new BoatActions(this);

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Move;
    private readonly InputAction m_Character_Jump;
    private readonly InputAction m_Character_Glide;
    private readonly InputAction m_Character_Look;
    private readonly InputAction m_Character_Fire;
    private readonly InputAction m_Character_Aim;
    private readonly InputAction m_Character_Run;
    private readonly InputAction m_Character_Flashlight;
    private readonly InputAction m_Character_Reset;
    private readonly InputAction m_Character_Pickup;
    private readonly InputAction m_Character_Pause;
    private readonly InputAction m_Character_Dodge;
    private readonly InputAction m_Character_Vision;
    private readonly InputAction m_Character_Interact;
    public struct CharacterActions
    {
        private @PlayerActions m_Wrapper;
        public CharacterActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Character_Move;
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        public InputAction @Glide => m_Wrapper.m_Character_Glide;
        public InputAction @Look => m_Wrapper.m_Character_Look;
        public InputAction @Fire => m_Wrapper.m_Character_Fire;
        public InputAction @Aim => m_Wrapper.m_Character_Aim;
        public InputAction @Run => m_Wrapper.m_Character_Run;
        public InputAction @Flashlight => m_Wrapper.m_Character_Flashlight;
        public InputAction @Reset => m_Wrapper.m_Character_Reset;
        public InputAction @Pickup => m_Wrapper.m_Character_Pickup;
        public InputAction @Pause => m_Wrapper.m_Character_Pause;
        public InputAction @Dodge => m_Wrapper.m_Character_Dodge;
        public InputAction @Vision => m_Wrapper.m_Character_Vision;
        public InputAction @Interact => m_Wrapper.m_Character_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Glide.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnGlide;
                @Glide.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnGlide;
                @Glide.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnGlide;
                @Look.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFire;
                @Aim.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                @Run.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRun;
                @Flashlight.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFlashlight;
                @Flashlight.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFlashlight;
                @Flashlight.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnFlashlight;
                @Reset.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnReset;
                @Pickup.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPickup;
                @Pause.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPause;
                @Dodge.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Vision.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnVision;
                @Vision.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnVision;
                @Vision.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnVision;
                @Interact.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Glide.started += instance.OnGlide;
                @Glide.performed += instance.OnGlide;
                @Glide.canceled += instance.OnGlide;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Flashlight.started += instance.OnFlashlight;
                @Flashlight.performed += instance.OnFlashlight;
                @Flashlight.canceled += instance.OnFlashlight;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Vision.started += instance.OnVision;
                @Vision.performed += instance.OnVision;
                @Vision.canceled += instance.OnVision;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBoatActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnReel(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnRightHarpoon(InputAction.CallbackContext context);
        void OnLeftHarpoon(InputAction.CallbackContext context);
        void OnShootHarpoon(InputAction.CallbackContext context);
        void OnCancelHarpoon(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
    }
    public interface ICharacterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnGlide(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnFlashlight(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnVision(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
